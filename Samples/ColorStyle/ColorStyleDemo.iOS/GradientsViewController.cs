// This file has been autogenerated from a class added in the UI designer.

using System;
using CoreGraphics;
using Styles;
using Styles.Color;
using UIKit;

namespace ColorStyleDemo.iOS
{
    public partial class GradientsViewController : UIViewController
    {
        Gradient gradient1;
        Gradient gradient2;
        Gradient gradient3;
        CGRect frame;

        public GradientsViewController(IntPtr handle) : base(handle)
        {
        }

        public override void ViewDidLoad()
        {
            base.ViewDidLoad();

            frame = new CGRect(0, 60, View.Frame.Width, 200);

            gradient1 = new Gradient(
                new IRgb[] { ColorSwatches.DeepOrange, ColorSwatches.Yellow }
            );

            gradient2 = new Gradient(
                new IRgb[] { ColorSwatches.FlatWhite, ColorSwatches.FlatWhite.WithAlpha(.4f), ColorSwatches.Yellow.WithAlpha(0) }
            );

            gradient3 = new Gradient(
                new IRgb[] { ColorSwatches.FlatWhite, ColorSwatches.Yellow.WithAlpha(0) }
            );

            //DrawMultiGradient();
            //DrawGradientSteps();
            //DrawRadialGradientLayer();
            DrawRadialGradient();
        }

        void DrawLinearGradient()
        {
            var linearLayer = gradient1.ToLinear(45).ToNativeLayer(frame);
            View.Layer.InsertSublayer(linearLayer, 0);
        }

        void DrawRadialGradient()
        {
            var radialGradient = gradient1.ToRadial();
            radialGradient.Center = new Styles.Drawing.PointF(0, 0.5f);


            var gradientView = radialGradient
              .ToNativeView(new CGRect(frame.X, frame.Y, frame.Width, frame.Height));

            Add(gradientView);
        }

        void DrawEllipticalGradient()
        {
            gradient1.SetScale(.25f, 1f);
            gradient1.SetFrame((float)(frame.Width / 2f - frame.Height / 2f), 0, (float)frame.Height, (float)frame.Height);
            gradient1.DrawingOptions = GradientDrawingOptions.BeforeStartLocation;

            var gradientView = gradient1
                .ToEllipse(0, .5f, 45)
              .ToNativeView(new CGRect(frame.X, frame.Y, frame.Width, frame.Height));

            Add(gradientView);
        }

        void DrawMultiGradient()
        {
            gradient2.SetScale(.4f, 1.6f);
            var multiGradient = new MultiGradient()
            {
                Gradients = new Gradient[]{
                    gradient1.ToLinear(45),
                    gradient2.ToEllipse(1f, .5f, 0),
                    gradient3.ToRadial(.98f, .5f)
                }
            };

            var gradientView = multiGradient.ToNativeView(frame);
            Add(gradientView);
        }

        void DrawRadialGradientLayer()
        {
            var gradientLayer = gradient1
                .ToRadial()
                .ToNativeLayer(new CGRect(frame.X, frame.Y, frame.Width, frame.Height));

            View.Layer.AddSublayer(gradientLayer);
        }

        void DrawGradientSteps()
        {
            var steps = 8;
            var swatchSize = View.Frame.Width / steps;

            var adjusted = gradient1.ShiftHues(0);
            var schemeFromGradient = adjusted.CreateColorPalette(steps);
            for (int i = 0; i < schemeFromGradient.Length; i++)
            {
                var color = (ColorRGB)schemeFromGradient[i];
                var swatch = new UIView(new CGRect(i * swatchSize, 300, swatchSize, swatchSize))
                {
                    BackgroundColor = color.ToNative()
                };
                Add(swatch);
            }
        }
    }
}
